stages:
  - test
  - package
  - e2e
  - container_scanning
  - cleanup
include:
  - template: Jobs/SAST.gitlab-ci.yml
variables:
  CS_ANALYZER_IMAGE: "$CI_TEMPLATE_REGISTRY_HOST/security-products/container-scanning:6"
  CS_SCHEMA_MODEL: 15
workflow:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: never
    - when: always

unit-test:
  stage: test
  image: python:3.11-alpine
  script:
    - cd backend
    - pip install pytest coverage
    - pip install -r requirements.txt
    - python -m coverage run -m pytest --junitxml=report.xml tests/
    - python -m coverage report
    - python -m coverage xml
  coverage: '/(?i)total.*? (100(?:\.0+)?\%|[1-9]?\d(?:\.\d+)?\%)$/'
  artifacts:
    reports:
      junit: backend/report.xml
      coverage_report:
        coverage_format: cobertura
        path: backend/coverage.xml

containerize:
  stage: package
  image: docker:20.10.15-dind
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: on_success
  variables:
    loc: "${CI_COMMIT_BRANCH}${CI_COMMIT_TAG}"
  before_script:
    - docker login -u ${CI_REGISTRY_USER} -p ${CI_REGISTRY_PASSWORD} ${CI_REGISTRY}
  script:
    - docker build -t ${CI_REGISTRY_IMAGE}/enigma_back:${loc} backend/
    - docker build -t ${CI_REGISTRY_IMAGE}/enigma_front:${loc} frontend/

    - docker push ${CI_REGISTRY_IMAGE}/enigma_back:${loc}
    - docker push ${CI_REGISTRY_IMAGE}/enigma_front:${loc}
  after_script:
    - docker rmi ${CI_REGISTRY_IMAGE}/enigma_back:${loc}
    - docker rmi ${CI_REGISTRY_IMAGE}/enigma_front:${loc}

containerize-and-tag:
  stage: package
  image: docker:20.10.15-dind
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
  before_script:
    - docker login -u ${CI_REGISTRY_USER} -p ${CI_REGISTRY_PASSWORD} ${CI_REGISTRY}
  script:
    - docker build -t ${CI_REGISTRY_IMAGE}/enigma_back:latest backend/
    - docker build -t ${CI_REGISTRY_IMAGE}/enigma_front:latest frontend/

    - docker push ${CI_REGISTRY_IMAGE}/enigma_back:latest
    - docker push ${CI_REGISTRY_IMAGE}/enigma_front:latest
  after_script:
    - docker rmi ${CI_REGISTRY_IMAGE}/enigma_back:latest
    - docker rmi ${CI_REGISTRY_IMAGE}/enigma_front:latest

e2e-test:
  image: docker:20.10.15-dind
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: on_success
  variables:
    loc: "${CI_COMMIT_BRANCH}${CI_COMMIT_TAG}"
  services:
    - name: ${CI_REGISTRY_IMAGE}/enigma_front:${loc}
      alias: frontend

    - name: ${CI_REGISTRY_IMAGE}/enigma_back:${loc}
      alias: backend
  stage: e2e
  script:
    - apk add --no-cache python3 py3-pip firefox
    - pip3 install behave selenium
    - pip3 install webdriver_manager
    - python3 -m behave E2E/

e2e-test-daily:
  image: docker:20.10.15-dind
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
  variables:
    loc: "latest"
  services:
    - name: ${CI_REGISTRY_IMAGE}/enigma_front:${loc}
      alias: frontend
    - name: ${CI_REGISTRY_IMAGE}/enigma_back:${loc}
      alias: backend
  stage: e2e
  script:
    - apk add --no-cache python3 py3-pip firefox
    - pip3 install behave selenium
    - pip3 install webdriver_manager
    - python3 -m behave E2E/

scan_back:
  image: "$CS_ANALYZER_IMAGE$CS_IMAGE_SUFFIX"
  stage: container_scanning
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: on_success
  variables:
    GIT_STRATEGY: none
    loc: "${CI_COMMIT_BRANCH}${CI_COMMIT_TAG}"
    CS_IMAGE: ${CI_REGISTRY_IMAGE}/enigma_back:${loc}
  allow_failure: true
  artifacts:
    reports:
      container_scanning: gl-container-scanning-report.json
      dependency_scanning: gl-dependency-scanning-report.json
    paths: [ gl-container-scanning-report.json, gl-dependency-scanning-report.json, "**/gl-sbom-*.cdx.json" ]
  dependencies: [ ]
  script:
    - gtcs scan

scan_back-daily:
  image: "$CS_ANALYZER_IMAGE$CS_IMAGE_SUFFIX"
  stage: container_scanning
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
  variables:
    GIT_STRATEGY: none
    loc: "latest"
    CS_IMAGE: ${CI_REGISTRY_IMAGE}/enigma_back:${loc}
  artifacts:
    reports:
      container_scanning: gl-container-scanning-report.json
      dependency_scanning: gl-dependency-scanning-report.json
    paths: [ gl-container-scanning-report.json, gl-dependency-scanning-report.json, "**/gl-sbom-*.cdx.json" ]
  dependencies: [ ]
  script:
    - gtcs scan

scan_front:
  image: "$CS_ANALYZER_IMAGE$CS_IMAGE_SUFFIX"
  stage: container_scanning
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: on_success
  variables:
    GIT_STRATEGY: none
    loc: "${CI_COMMIT_BRANCH}${CI_COMMIT_TAG}"
    CS_IMAGE: ${CI_REGISTRY_IMAGE}/enigma_front:${loc}
  allow_failure: true
  artifacts:
    reports:
      container_scanning: gl-container-scanning-report.json
      dependency_scanning: gl-dependency-scanning-report.json
    paths: [ gl-container-scanning-report.json, gl-dependency-scanning-report.json, "**/gl-sbom-*.cdx.json" ]
  dependencies: [ ]
  script:
    - gtcs scan

scan_front-daily:
  image: "$CS_ANALYZER_IMAGE$CS_IMAGE_SUFFIX"
  stage: container_scanning
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
  variables:
    GIT_STRATEGY: none
    loc: "latest"
    CS_IMAGE: ${CI_REGISTRY_IMAGE}/enigma_front:${loc}
  allow_failure: true
  artifacts:
    reports:
      container_scanning: gl-container-scanning-report.json
      dependency_scanning: gl-dependency-scanning-report.json
    paths: [ gl-container-scanning-report.json, gl-dependency-scanning-report.json, "**/gl-sbom-*.cdx.json" ]
  dependencies: [ ]
  script:
    - gtcs scan

remove-container:
  variables:
    loc: "${CI_COMMIT_BRANCH}"
  stage: cleanup
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - if: $CI_COMMIT_TAG
      when: never
    - when: on_success
  image: docker:20.10.15-dind
  before_script:
    - docker login -u ${CI_REGISTRY_USER} -p ${CI_REGISTRY_PASSWORD} ${CI_REGISTRY}
  script:
    - wget -O /usr/bin/reg https://github.com/genuinetools/reg/releases/download/v0.16.0/reg-linux-amd64
    - chmod +x /usr/bin/reg
    - reg rm ${CI_REGISTRY_IMAGE}/enigma_back:${loc}
    - reg rm ${CI_REGISTRY_IMAGE}/enigma_front:${loc}